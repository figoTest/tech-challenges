<?php
namespace IWD\JOBINTERVIEW\Tests\Unit\Services;

use IWD\JOBINTERVIEW\Client\Webapp\DTO\AggregateQuestionDetailsDto;
use IWD\JOBINTERVIEW\Client\Webapp\DTO\SurveyDetailsDto;
use IWD\JOBINTERVIEW\Client\Webapp\Repository\SurveyRepositoryImpl;
use IWD\JOBINTERVIEW\Client\Webapp\Services\BuildQuestionAverageNumberOfProductsService;
use IWD\JOBINTERVIEW\Client\Webapp\Services\BuildQuestionTypeQcmService;
use IWD\JOBINTERVIEW\Client\Webapp\Services\BuildQuestionVisitDate;
use IWD\JOBINTERVIEW\Client\Webapp\Services\GetAggregateSurveyService;
use IWD\JOBINTERVIEW\Client\Webapp\Services\GetGroupedSurveyByCodeService;
use IWD\JOBINTERVIEW\Client\Webapp\Services\JsonParserService;
use PHPUnit\Framework\TestCase;

class GetAggregateSurveyServiceTest extends TestCase
{
    const SURVEY_CODE = "XX3";

    /** @var GetGroupedSurveyByCodeService  */
    private $getGroupedSurveyByCodeService;
    /** @var BuildQuestionTypeQcmService */
    private $buildQuestionTypeQcmService;
    /** @var BuildQuestionAverageNumberOfProductsService */
    private $buildQuestionAverageNumberOfProductsService;
    /** @var BuildQuestionVisitDate */
    private $buildQuestionVisitDate;

    protected function setUp()
    {
        $this->getGroupedSurveyByCodeService = new GetGroupedSurveyByCodeService(
            new SurveyRepositoryImpl(new JsonParserService())
        );
        $this->buildQuestionTypeQcmService = new BuildQuestionTypeQcmService();
        $this->buildQuestionAverageNumberOfProductsService = new BuildQuestionAverageNumberOfProductsService();
        $this->buildQuestionVisitDate = new BuildQuestionVisitDate();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testAggregate()
    {
        //GIVEN

        //WHEN
        $service = new GetAggregateSurveyService(
            $this->getGroupedSurveyByCodeService,
            $this->buildQuestionTypeQcmService,
            $this->buildQuestionAverageNumberOfProductsService,
            $this->buildQuestionVisitDate
        );
        $response = $service->execute(self::SURVEY_CODE);

        //THEN
        /** @var SurveyDetailsDto $surveyDetailsDto */
        $surveyDetailsDto = $response['surveyDetails'];
        /** @var AggregateQuestionDetailsDto[] $questionDetails */
        $questionDetails = $response['questionDetails'];

        $this->assertInstanceOf(SurveyDetailsDto::class, $surveyDetailsDto);
        $this->assertEquals(self::SURVEY_CODE, $surveyDetailsDto->getCode());

        $this->assertEquals(GetAggregateSurveyService::QT_QCM, $questionDetails[0]->getType());
        $this->assertEquals(GetAggregateSurveyService::QT_NUMERIC, $questionDetails[1]->getType());
        $this->assertEquals(6, count($questionDetails[0]->getOptions()));
        $this->assertEquals(2, $questionDetails[0]->getOptions()['Product 2']['true']);
        $this->assertEquals(2, $questionDetails[0]->getOptions()['Product 2']['false']);
        $this->assertEquals(6200, $questionDetails[1]->getOptions());
        $this->assertEquals(4, count($questionDetails[2]->getOptions()));
    }

    /**
     * @expectedException \IWD\JOBINTERVIEW\Client\Webapp\Exceptions\SurveyNotFoundException
     * @expectedExceptionMessage Survey with code 000 not found.
     */
    public function testNotFoundSurveyByCode()
    {
        //GIVEN

        //WHEN
        $service = new GetAggregateSurveyService(
            $this->getGroupedSurveyByCodeService,
            $this->buildQuestionTypeQcmService,
            $this->buildQuestionAverageNumberOfProductsService,
            $this->buildQuestionVisitDate
        );
        $response = $service->execute("000");

        //THEN
    }
}